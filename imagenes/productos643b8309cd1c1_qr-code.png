<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generador de QR</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }

        #qr {
            margin-top: 15px;
        }

        .hidden {
            display: none;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/gh/davidshimjs/qrcodejs/qrcode.min.js"></script>
</head>
<body>
    <h1>Generador de Códigos QR</h1>
    <p>Ingrese el enlace para convertir en código QR:</p>
    <input type="text" id="url" placeholder="Enlace...">
    <button onclick="generateQRCode()">Generar QR</button>
    <div id="qr"></div>
    <a id="downloadLink" href="#" class="hidden" download="qr-code.png">Descargar QR</a>

    <script>
        function generateQRCode() {
            const url = document.getElementById('url').value;
            const qrContainer = document.getElementById('qr');
            qrContainer.innerHTML = '';
            if (url) {
                new QRCode(qrContainer, url);
                const downloadLink = document.getElementById('downloadLink');
                downloadLink.href = qrContainer.querySelector('img').src;
                downloadLink.classList.remove('hidden');
            }
        }
    </script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>
</html>